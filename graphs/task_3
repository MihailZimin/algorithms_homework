class Solution {
public:
    vector<int> visited;

    void dfs(int v, int color, vector<vector<int>>& graph){
        visited[v] = color;
        for (int i = 0; i < graph.size(); ++i){
            if (i == v) continue;
            if (visited[i]) continue;
            if (graph[v][i]){
                dfs(i, color, graph);
            }
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        visited.assign(n, 0);
        int color = 1;
        for (int i = 0; i < n; ++i){
            if (!visited[i]){
                dfs(i, color++, isConnected);
            }
        }
        return color - 1;
    }
};
