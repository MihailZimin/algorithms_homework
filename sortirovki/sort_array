class Solution {
public:
    void print(vector<int>& arr){
        for (int i = 0; i < arr.size(); ++i){
            cout << arr[i] << ' ';
        }
        cout << '\n';
    }

    std::pair<int, int> partition(int l, int r, std::vector<int>& arr) {
        static std::random_device dev;
        static std::mt19937 rng(dev());
        std::uniform_int_distribution<std::mt19937::result_type> dist6(l, r-1);
        std::swap(arr[dist6(rng)], arr[r-1]);
        int ind = l;
        for (int i = l; i < r; ++i) {
            if (arr[i] < arr[r-1]) {
                std::swap(arr[i], arr[ind]);
                ind++;
            }
        }
        int tmpind = ind;
        for (int i = ind; i < r; ++i) {
            if (arr[i] == arr[r - 1]) {
                std::swap(arr[i], arr[ind]);
                ind++;
            }
        }
        if (ind != r)
            std::swap(arr[r-1], arr[ind]);
        return {tmpind, ind};
    }

    void quickSort(std::vector<int>& arr, int l, int r) {
    if (r - l <= 1) return;
    std::pair<int, int> indexes = partition(l, r, arr);
    quickSort(arr, l, indexes.first);
    quickSort(arr, indexes.second, r);
}

    vector<int> sortArray(vector<int>& nums) {
        quickSort(nums, 0, nums.size());
        return nums;
    }
};
